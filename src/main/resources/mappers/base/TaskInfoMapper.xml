<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.religion.zhiyun.task.dao.TaskInfoMapper">

    <insert id="addTask">
        insert into rm_task_info(
            TASK_NAME,
            TASK_CONTENT,
            END_TIME,
            REL_VENUES_ID,
            EMERGENCY_LEVEL,
            TASK_PICTURE,
            TASK_VIDEO,
            LAUNCH_PERSON,
            HANDLE_PERSON,
            HANDLE_RESULTS,
            HANDLE_TIME,
            TASK_TYPE,
            PROC_INST_ID,
            FLOW_TYPE,
            LAUNCH_TIME
        )
        values (
            #{taskName},
            #{taskContent},
            #{endTime},
            #{relVenuesId},
            #{emergencyLevel},
            #{taskPicture},
            #{taskVideo},
            #{launchPerson},
            #{handlePerson},
            #{handleResults},
            #{handleTime},
            #{taskType},
            #{procInstId},
            #{flowType},
            #{launchTime}
        )
    </insert>

    <update id="updateTask" >
        update rm_task_info t
            set t.HANDLE_PERSON=#{handlePerson},t.HANDLE_RESULTS=#{handleResults},t.HANDLE_TIME=#{handleTime}
        where PROC_INST_ID=#{procInstId}
    </update>

    <sql id="taskColumn">
        TASK_NAME as taskName,
        TASK_CONTENT as taskContent,
        END_TIME as endTime,
        REL_VENUES_ID as relVenuesId,
        EMERGENCY_LEVEL as emergencyLevel,
        TASK_PICTURE as taskPicture,
        TASK_VIDEO as taskVideo,
        LAUNCH_PERSON as launchPerson,
        HANDLE_PERSON as handlePerson,
        HANDLE_RESULTS as handleResults,
        HANDLE_TIME as handleTime,
        TASK_TYPE as taskType,
        PROC_INST_ID as procInstId
    </sql>

    <select id="queryTasks" resultType="com.religion.zhiyun.task.entity.TaskEntity">
        select
            ta.TASK_NAME as taskName,
            ta.TASK_CONTENT as taskContent,
            ta.END_TIME as endTime,
            ve.VENUES_ADDRES as venuesAddres,
            case ta.EMERGENCY_LEVEL
            when '01' then '紧急'
            when '02' then '普通'
            else ta.EMERGENCY_LEVEL
            end as emergencyLevel

        from rm_task_info ta
        left join rm_venues_info ve on ve.VENUES_ID=ta.REL_VENUES_ID
        left join act_ru_task ac on ta.PROC_INST_ID=ac.PROC_INST_ID_
        where ac.assignee_=#{loginNm}

        <if test="taskName != null and taskName != ''">
            and ta.TASK_NAME LIKE CONCAT('%',#{taskName},'%')
        </if>
        <if test="taskContent != null and taskContent != ''">
            and ta.TASK_CONTENT LIKE CONCAT('%',#{taskContent},'%')
        </if>
        order by ta.END_TIME desc
        limit #{page},#{size}

    </select>

    <select id="getTaskNum" resultType="map">
        select
            count(USER_ID_) as allSum,
            ifnull(SUM(CASE WHEN d.TYPE_ = 'starter' THEN 1 ELSE 0 END),0) AS startSum,
            ifnull(SUM(CASE WHEN d.TYPE_ = 'participant' THEN 1 ELSE 0 END),0) AS executeNum
        from act_hi_identitylink d
        where user_id_ =#{loginNm}
    </select>
    <select id="queryByInstId" resultType="map">
        select
            ta.TASK_NAME as taskName,
            ta.TASK_CONTENT as taskContent,
            ta.END_TIME as endTime,
            ve.VENUES_ADDRES as venuesAddres,
            case ta.EMERGENCY_LEVEL
            when '01' then '紧急'
            when '02' then '普通'
            else ta.EMERGENCY_LEVEL
            end as emergencyLevel,
            ta.EMERGENCY_LEVEL as emergencyLevelCode,
            ta.LAUNCH_PERSON as launchPerson,
            ta.LAUNCH_TIME as launchTime,
            ta.HANDLE_TIME as handleTime,
            ta.HANDLE_RESULTS as handleResults,
            ta.PROC_INST_ID as procInstId,
            ta.FLOW_TYPE as flowType,
            ta.TASK_TYPE as taskType

        from rm_task_info ta
        left join rm_venues_info ve on ve.VENUES_ID=ta.REL_VENUES_ID
        where ta.PROC_INST_ID in
        <foreach collection="idList" item="procInstId" index="index" open="(" close=")" separator=",">
            #{procInstId}
        </foreach>
        order by ta.END_TIME
        limit #{page},#{size}

    </select>

    <select id="getProcdef" resultType="com.religion.zhiyun.task.entity.ProcdefEntity">
        select
            pro.NAME_ as name,
            pro.DESCRIPTION_ as description,
            pro.KEY_  as taskKey,
            pro.VERSION_ as version,
            pro.RESOURCE_NAME_ as resourceName
        from act_re_procdef pro
        where 1=1
        <if test="taskName != null and taskName != ''">
            and pro.NAME_ LIKE CONCAT('%',#{taskName},'%')
        </if>
        order by pro.KEY_ ,pro.VERSION_ desc
        limit #{page},#{size}
    </select>

    <insert id="addFill">
        insert into rm_filing_info(
            TASK_NAME,
            TASK_CONTENT,
            REL_VENUES_ID,
            TASK_PICTURE,
            TASK_VIDEO,
            LAUNCH_PERSON,
            LAUNCH_TIME,
            HANDLE_PERSON,
            HANDLE_RESULTS,
            HANDLE_TIME,
            PROC_INST_ID,
            PART_NUM,
            RESPONSIBLE_PERSON,
            TASK_TIME,
            FILING_STATUS
        )
        values (
            #{taskName},
            #{taskContent},
            #{relVenuesId},
            #{taskPicture},
            #{taskVideo},
            #{launchPerson},
            #{launchTime},
            #{handlePerson},
            #{handleResults},
            #{handleTime},
            #{procInstId},
            #{partNum},
            #{responsiblePerson},
            #{taskTime},
            #{filingStatus}
        )
    </insert>

    <update id="updateFill" >
        update rm_filing_info t
        set t.HANDLE_PERSON=#{handlePerson},
            t.HANDLE_RESULTS=#{handleResults},
            t.HANDLE_TIME=#{handleTime},
            t.FILING_STATUS='02'
        where t.PROC_INST_ID=#{procInstId}
    </update>

    <select id="getIssuedUsers" resultType="String">
        select
            f.LOGIN_NM AS loginNm
        FROM rm_sys_user_info f
        left join rm_sys_user_info u on u.province=f.province
        where f.VALID_IND='1'
        and u.LOGIN_NM=#{loginNm}
        and f.IDENTITY  not in
        <foreach collection="identityArr" item="identity" index="index" open="(" close=")" separator=",">
            #{identity}
        </foreach>
        <if test="province != null and province != ''">
            and f.province=#{province}
        </if>
        <if test="city != null and city != ''">
            and f.city=#{city}
        </if>
        <if test="area != null and area != ''">
            and f.area=#{area}
        </if>
        <if test="town != null and town != ''">
            and f.town=#{town}
        </if>
        <if test="relVenuesId != null and relVenuesId != ''">
            and f.REL_VENUES_ID=#{relVenuesId}
        </if>

        order by f.IDENTITY
    </select>

    <select id="getJieGanUsers" resultType="String">
        select
           distinct g.LOGIN_NM AS loginNm
        from rm_sys_user_info  g
        left join rm_sys_user_info u on g.town=u.town
        where g.VALID_IND='1'
        and g.IDENTITY ='10000005'
        <if test="relVenuesId!=null and relVenuesId!=''">
            and u.REL_VENUES_ID = #{relVenuesId}
        </if>
        order by g.user_id
    </select>

    <select id="getFillHistory" resultType="map">
        select
            t.FILING_ID as filingId,
            t.TASK_NAME as taskName,
            DATE_FORMAT(t.TASK_TIME,'%Y-%m-%d %H:%i:%s') as taskTime,
            v.VENUES_NAME as venuesName
        from rm_filing_info t
        left join rm_venues_info v on v.VENUES_ID =t.REL_VENUES_ID
        left join rm_venues_manager_info m on v.RESPONSIBLE_PERSON=m.MANAGER_ID
        where t.FILING_STATUS='02'
        and m.MANAGER_MOBILE=#{login}
        <if test="search!=null and search!=''">
            AND  (
            t.TASK_NAME LIKE CONCAT('%',#{search},'%')
            or t.TASK_CONTENT LIKE CONCAT('%',#{search},'%')
            or v.VENUES_NAME LIKE CONCAT('%',#{search},'%')
            )
        </if>
        order by t.TASK_TIME desc
        limit #{page},#{size}

    </select>

    <select id="getFillHisDetail" resultType="map">
        select
            t.FILING_ID as filingId,
            t.TASK_NAME as taskName,
            DATE_FORMAT(t.TASK_TIME,'%Y-%m-%d %H:%i:%s') as taskTime,
            v.VENUES_NAME as venuesName,
            t.PART_NUM as partNum,
            t.TASK_CONTENT as taskContent,
            m.MANAGER_CN_NM as responsiblePerson,
            t.TASK_PICTURE as taskPicture

        from rm_filing_info t
        left join rm_venues_info v on v.VENUES_ID =t.REL_VENUES_ID
        left join rm_venues_manager_info m on v.RESPONSIBLE_PERSON=m.MANAGER_ID
        where t.FILING_ID =#{filingId}
    </select>

    <select id="getMonitorTask" resultType="map">
        select
            v.VENUES_ADDRES as venuesAddres,
            ta.TASK_CONTENT as taskContent,
            DATE_FORMAT(ta.END_TIME,'%Y-%m-%d %H:%i:%s') as endTime,
            ta.LAUNCH_PERSON as launchPerson,
            ta.PROC_INST_ID as procInstId
        from rm_task_info ta
        left join rm_venues_info v on v.VENUES_ID =ta.REL_VENUES_ID
        where ta.TASK_ID=#{taskId}
    </select>
    <select id="getTaskMonth" resultType="java.util.Map">
        SELECT  tm.tmDate as date,
                IFNULL(task.reach,0) as reach,
                IFNULL(task.issued,0) as issued
        FROM (
            SELECT left(date_add(DATE_SUB(CURDATE(),INTERVAL dayofyear(now())-1 DAY), interval i month),7) AS tmDate
            FROM num a where a.i >-9 and type='month'
        ) tm
        LEFT JOIN (
            select  DATE_FORMAT(LAUNCH_TIME,'%Y-%m') evDate,
                    SUM(CASE WHEN FLOW_TYPE = 01 THEN 1 ELSE 0 END) AS reach,
                    SUM(CASE WHEN FLOW_TYPE = 02 THEN 1 ELSE 0 END) AS issued
            from rm_task_info
            where DATE_FORMAT(LAUNCH_TIME,'%Y-%m-%d') > date_add(CURDATE(), interval 31*-9 day)
            group by evDate
        ) task on tm.tmDate= task.evDate
        ORDER BY tm.tmDate
    </select>
    <select id="getTaskDayGather" resultType="java.util.Map">
        SELECT  DATE_FORMAT(tm.tmDate,'%Y-%m-%d') as date,
                IFNULL(task.reach,0) as reach,
                IFNULL(task.issued,0) as issued
        FROM(
            SELECT date_add(CURDATE(), interval i day) AS tmDate FROM num a where a.i > #{num} and type='day'
        ) tm
        LEFT JOIN(
            select  DATE_FORMAT(LAUNCH_TIME,'%Y-%m-%d') evDate,
                    SUM(CASE WHEN FLOW_TYPE = 01 THEN 1 ELSE 0 END) AS reach,
                    SUM(CASE WHEN FLOW_TYPE = 02 THEN 1 ELSE 0 END) AS issued
            from rm_task_info
            where DATE_FORMAT(LAUNCH_TIME,'%Y-%m-%d') > date_add(CURDATE(), interval #{num} day)
            group by evDate
        ) task on tm.tmDate= task.evDate
        ORDER BY tm.tmDate
    </select>
    <select id="getTaskWeekGather" resultType="java.util.Map">
        SELECT (@rownum := @rownum + 1) AS date,
                IFNULL(zh.reach,0) as reach,
                IFNULL(zh.issued,0) as issued
        FROM(
            SELECT i AS tmDate FROM num a where a.i > #{num} and type='day'
        ) tm
        LEFT JOIN
        (
            SELECT  ors.weeks,
                IFNULL(ors.reach,0) as reach,
                IFNULL(ors.issued,0) as issued
            from (
                (
                    select  WEEK(LAUNCH_TIME,3) -(WEEK(CURDATE(),3)) as weeks,
                    SUM(CASE WHEN FLOW_TYPE = 01 THEN 1 ELSE 0 END) AS reach,
                    SUM(CASE WHEN FLOW_TYPE = 02 THEN 1 ELSE 0 END) AS issued
                    from rm_task_info task
                    where DATE_FORMAT(LAUNCH_TIME,'%Y')=DATE_FORMAT(CURDATE(),'%Y')
                    and DATE_FORMAT(LAUNCH_TIME,'%Y-%m-%d') > date_add(CURDATE(), interval (#{num}+1)*7 day)
                    GROUP BY weeks
                    ORDER BY weeks
                )union all(
                    select (WEEK(LAUNCH_TIME,3) -(select WEEK(HANDLE_TIME,3) as h from num where type='lastYear') - (WEEK(CURDATE(),3))) as weeks,
                    SUM(CASE WHEN FLOW_TYPE = 01 THEN 1 ELSE 0 END) AS reach,
                    SUM(CASE WHEN FLOW_TYPE = 02 THEN 1 ELSE 0 END) AS issued
                    from rm_task_info  task
                    where DATE_FORMAT(LAUNCH_TIME,'%Y')=DATE_FORMAT(CURDATE(),'%Y')-1
                    and DATE_FORMAT(LAUNCH_TIME,'%Y-%m-%d') > (select date_add(subdate(curdate(),date_format(curdate(),'%w')-1),interval 7*(#{num}+1)-1 day)from dual)
                    GROUP BY weeks
                    ORDER BY weeks desc
                )
            ) ors
        )zh on tm.tmDate=zh.weeks
        join (SELECT @rownum := 0) AS rn
        order by tm.tmDate
    </select>


</mapper>
